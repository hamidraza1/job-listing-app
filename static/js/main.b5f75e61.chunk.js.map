{"version":3,"sources":["Container/Container.module.css","Job/Job.module.css","Header/Header.module.css","HeaderImage/bg-header-desktop.svg","Job/ResetButton/ResetButton.module.css","Header/Header.js","Job/Job.js","Job/ResetButton/ResetButton.js","Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","classes","header","src","Image","alt","Component","Job","image","this","props","description","company","new","featured","position","postedAt","contract","location","requirements","role","onClick","RoleFilter","level","LevelFilter","languages","tools","ResetButton","rstbtn","resetAll","Container","state","rolefilteredJob","levelfilteredJob","languagefilteredJob","toolfilteredJob","reset","RoleFilterHandler","event","console","log","target","innerText","setState","JobData","filter","FilteredPost","trim","map","JobPost","key","id","logo","language","LanguageFilterHandler","tool","ToolFilterHandler","LevelFilterHandler","LanguageFilter","ToolFilter","includes","resetAllHandler","job","resetbtn","resetdiv","body","container","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5f75e61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Container_body__3oKhE\",\"container\":\"Container_container__12rWX\",\"resetdiv\":\"Container_resetdiv__1ztyI\",\"language\":\"Container_language__3uiXQ\",\"tool\":\"Container_tool__1zCqT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Job\":\"Job_Job__3VeOr\",\"image\":\"Job_image__33k52\",\"description\":\"Job_description__1hIDW\",\"company\":\"Job_company__3VQyJ\",\"new\":\"Job_new__3Ujoa\",\"featured\":\"Job_featured__TdMqy\",\"position\":\"Job_position__2iBnX\",\"requirements\":\"Job_requirements__1MGgJ\",\"role\":\"Job_role__1ywQq\",\"level\":\"Job_level__1lz-o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__192jd\"};","module.exports = __webpack_public_path__ + \"static/media/bg-header-desktop.6e2f7196.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rstbtn\":\"ResetButton_rstbtn__svAfq\"};","import React, { Component } from \"react\";\r\nimport classes from \"./Header.module.css\";\r\nimport Image from \"../HeaderImage/bg-header-desktop.svg\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img className={classes.header} src={Image} alt=\"the pic\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./Job.module.css\";\r\n\r\nclass Job extends Component {\r\n  render() {\r\n    return (\r\n      <div className={classes.Job}>\r\n        <div className={classes.image}>\r\n          <img src={\".\" + this.props.image} alt=\"\" />\r\n        </div>\r\n        <div className={classes.description}>\r\n          <div>\r\n            <span className={classes.company}>{this.props.company} </span>\r\n            <span className={classes.new}>\r\n              {this.props.new ? \"NEW\" : \"OLD\"}\r\n            </span>\r\n            <span className={classes.featured}>\r\n              {this.props.featured ? \"FEATURED\" : \"NON-FEATURED\"}\r\n            </span>\r\n          </div>\r\n          <div className={classes.position}>{this.props.position}</div>\r\n          <div>\r\n            <span>{this.props.postedAt}</span>\r\n            <span> . {this.props.contract}</span>\r\n            <span> . {this.props.location}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={classes.requirements}>\r\n          <div>\r\n            <span className={classes.role} onClick={this.props.RoleFilter}>\r\n              {this.props.role}\r\n            </span>\r\n            <span className={classes.level} onClick={this.props.LevelFilter}>\r\n              {this.props.level}\r\n            </span>\r\n            <span>{this.props.languages}</span>\r\n            <span>{this.props.tools}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Job;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./ResetButton.module.css\";\r\nclass ResetButton extends Component {\r\n  render() {\r\n    return (\r\n      <button className={classes.rstbtn} onClick={this.props.resetAll}>\r\n        Reset...\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResetButton;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./Container.module.css\";\r\nimport JobData from \"../data/data.json\";\r\nimport Header from \"../Header/Header\";\r\nimport Job from \"../Job/Job\";\r\nimport ResetButton from \"../Job/ResetButton/ResetButton\";\r\n\r\nclass Container extends Component {\r\n  state = {\r\n    rolefilteredJob: null,\r\n    levelfilteredJob: null,\r\n    languagefilteredJob: null,\r\n    toolfilteredJob: null,\r\n    reset: false,\r\n  };\r\n\r\n  RoleFilterHandler = (event) => {\r\n    console.log(event.target.innerText);\r\n    this.setState({\r\n      levelfilteredJob: null,\r\n      languagefilteredJob: null,\r\n      toolfilteredJob: null,\r\n      rolefilteredJob: JobData.filter((FilteredPost) => {\r\n        return FilteredPost.role === event.target.innerText.trim();\r\n      }).map((JobPost) => {\r\n        return (\r\n          <Job\r\n            key={JobPost.id}\r\n            image={JobPost.logo}\r\n            company={JobPost.company}\r\n            new={JobPost.new}\r\n            featured={JobPost.featured}\r\n            position={JobPost.position}\r\n            postedAt={JobPost.postedAt}\r\n            contract={JobPost.contract}\r\n            location={JobPost.location}\r\n            role={JobPost.role}\r\n            level={JobPost.level}\r\n            languages={JobPost.languages.map((language) => {\r\n              return (\r\n                <span\r\n                  className={classes.language}\r\n                  onClick={this.LanguageFilterHandler}\r\n                >\r\n                  {language}\r\n                </span>\r\n              );\r\n            })}\r\n            tools={JobPost.tools.map((tool) => {\r\n              return (\r\n                <span className={classes.tool} onClick={this.ToolFilterHandler}>\r\n                  {\" \"}\r\n                  {tool}{\" \"}\r\n                </span>\r\n              );\r\n            })}\r\n            RoleFilter={(event) => this.RoleFilterHandler(event)}\r\n            LevelFilter={(event) => this.LevelFilterHandler(event)}\r\n            LanguageFilter={(event) => this.LanguageFilterHandler(event)}\r\n            ToolFilter={(event) => this.ToolFilterHandler(event)}\r\n          />\r\n        );\r\n      }),\r\n      reset: true,\r\n    });\r\n  };\r\n\r\n  LevelFilterHandler = (event) => {\r\n    console.log(event.target.innerText);\r\n    this.setState({\r\n      rolefilteredJob: null,\r\n      languagefilteredJob: null,\r\n      toolfilteredJob: null,\r\n      levelfilteredJob: JobData.filter((FilteredPost) => {\r\n        return FilteredPost.level === event.target.innerText.trim();\r\n      }).map((JobPost) => {\r\n        return (\r\n          <Job\r\n            key={JobPost.id}\r\n            image={JobPost.logo}\r\n            company={JobPost.company}\r\n            new={JobPost.new}\r\n            featured={JobPost.featured}\r\n            position={JobPost.position}\r\n            postedAt={JobPost.postedAt}\r\n            contract={JobPost.contract}\r\n            location={JobPost.location}\r\n            role={JobPost.role}\r\n            level={JobPost.level}\r\n            languages={JobPost.languages.map((language) => {\r\n              return (\r\n                <span\r\n                  className={classes.language}\r\n                  onClick={this.LanguageFilterHandler}\r\n                >\r\n                  {language}\r\n                </span>\r\n              );\r\n            })}\r\n            tools={JobPost.tools.map((tool) => {\r\n              return (\r\n                <span className={classes.tool} onClick={this.ToolFilterHandler}>\r\n                  {\" \"}\r\n                  {tool}{\" \"}\r\n                </span>\r\n              );\r\n            })}\r\n            RoleFilter={(event) => this.RoleFilterHandler(event)}\r\n            LevelFilter={(event) => this.LevelFilterHandler(event)}\r\n            LanguageFilter={(event) => this.LanguageFilterHandler(event)}\r\n            ToolFilter={(event) => this.ToolFilterHandler(event)}\r\n          />\r\n        );\r\n      }),\r\n      reset: true,\r\n    });\r\n  };\r\n\r\n  LanguageFilterHandler = (event) => {\r\n    console.log(event.target.innerText);\r\n    this.setState({\r\n      rolefilteredJob: null,\r\n      levelfilteredJob: null,\r\n      toolfilteredJob: null,\r\n      languagefilteredJob: JobData.filter((FilteredPost) => {\r\n        return FilteredPost.languages.includes(event.target.innerText.trim());\r\n      }).map((JobPost) => {\r\n        return (\r\n          <Job\r\n            key={JobPost.id}\r\n            image={JobPost.logo}\r\n            company={JobPost.company}\r\n            new={JobPost.new}\r\n            featured={JobPost.featured}\r\n            position={JobPost.position}\r\n            postedAt={JobPost.postedAt}\r\n            contract={JobPost.contract}\r\n            location={JobPost.location}\r\n            role={JobPost.role}\r\n            level={JobPost.level}\r\n            languages={JobPost.languages.map((language) => {\r\n              return (\r\n                <span\r\n                  className={classes.language}\r\n                  onClick={this.LanguageFilterHandler}\r\n                >\r\n                  {language}\r\n                </span>\r\n              );\r\n            })}\r\n            tools={JobPost.tools.map((tool) => {\r\n              return (\r\n                <span className={classes.tool} onClick={this.ToolFilterHandler}>\r\n                  {\" \"}\r\n                  {tool}{\" \"}\r\n                </span>\r\n              );\r\n            })}\r\n            RoleFilter={(event) => this.RoleFilterHandler(event)}\r\n            LevelFilter={(event) => this.LevelFilterHandler(event)}\r\n            LanguageFilter={(event) => this.LanguageFilterHandler(event)}\r\n            ToolFilter={(event) => this.ToolFilterHandler(event)}\r\n          />\r\n        );\r\n      }),\r\n      reset: true,\r\n    });\r\n  };\r\n  ToolFilterHandler = (event) => {\r\n    console.log(event.target.innerText);\r\n    this.setState({\r\n      rolefilteredJob: null,\r\n      levelfilteredJob: null,\r\n      languagefilteredJob: null,\r\n      toolfilteredJob: JobData.filter((FilteredPost) => {\r\n        return FilteredPost.tools.includes(event.target.innerText.trim());\r\n      }).map((JobPost) => {\r\n        return (\r\n          <Job\r\n            key={JobPost.id}\r\n            image={JobPost.logo}\r\n            company={JobPost.company}\r\n            new={JobPost.new}\r\n            featured={JobPost.featured}\r\n            position={JobPost.position}\r\n            postedAt={JobPost.postedAt}\r\n            contract={JobPost.contract}\r\n            location={JobPost.location}\r\n            role={JobPost.role}\r\n            level={JobPost.level}\r\n            languages={JobPost.languages.map((language) => {\r\n              return (\r\n                <span\r\n                  className={classes.language}\r\n                  onClick={this.LanguageFilterHandler}\r\n                >\r\n                  {language}\r\n                </span>\r\n              );\r\n            })}\r\n            tools={JobPost.tools.map((tool) => {\r\n              return (\r\n                <span className={classes.tool} onClick={this.ToolFilterHandler}>\r\n                  {\" \"}\r\n                  {tool}{\" \"}\r\n                </span>\r\n              );\r\n            })}\r\n            RoleFilter={(event) => this.RoleFilterHandler(event)}\r\n            LevelFilter={(event) => this.LevelFilterHandler(event)}\r\n            LanguageFilter={(event) => this.LanguageFilterHandler(event)}\r\n            ToolFilter={(event) => this.ToolFilterHandler(event)}\r\n          />\r\n        );\r\n      }),\r\n      reset: true,\r\n    });\r\n  };\r\n\r\n  resetAllHandler = () => {\r\n    this.setState({\r\n      rolefilteredJob: null,\r\n      levelfilteredJob: null,\r\n      languagefilteredJob: null,\r\n      toolfilteredJob: null,\r\n      reset: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let job = JobData.map((JobPost) => {\r\n      return (\r\n        <Job\r\n          key={JobPost.id}\r\n          image={JobPost.logo}\r\n          company={JobPost.company}\r\n          new={JobPost.new}\r\n          featured={JobPost.featured}\r\n          position={JobPost.position}\r\n          postedAt={JobPost.postedAt}\r\n          contract={JobPost.contract}\r\n          location={JobPost.location}\r\n          role={JobPost.role}\r\n          level={JobPost.level}\r\n          languages={JobPost.languages.map((language) => {\r\n            return (\r\n              <span\r\n                className={classes.language}\r\n                onClick={this.LanguageFilterHandler}\r\n              >\r\n                {language}\r\n              </span>\r\n            );\r\n          })}\r\n          tools={JobPost.tools.map((tool) => {\r\n            return (\r\n              <span className={classes.tool} onClick={this.ToolFilterHandler}>\r\n                {\" \"}\r\n                {tool}{\" \"}\r\n              </span>\r\n            );\r\n          })}\r\n          RoleFilter={(event) => this.RoleFilterHandler(event)}\r\n          LevelFilter={(event) => this.LevelFilterHandler(event)}\r\n          LanguageFilter={(event) => this.LanguageFilterHandler(event)}\r\n          ToolFilter={(event) => this.ToolFilterHandler(event)}\r\n        />\r\n      );\r\n    });\r\n    let resetbtn = null;\r\n    if (this.state.reset) {\r\n      resetbtn = (\r\n        <div className={classes.resetdiv}>\r\n          <ResetButton resetAll={this.resetAllHandler} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.rolefilteredJob) {\r\n      job = this.state.rolefilteredJob;\r\n    }\r\n    if (this.state.levelfilteredJob) {\r\n      job = this.state.levelfilteredJob;\r\n    }\r\n    if (this.state.languagefilteredJob) {\r\n      job = this.state.languagefilteredJob;\r\n    }\r\n    if (this.state.toolfilteredJob) {\r\n      job = this.state.toolfilteredJob;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.body}>\r\n        <Header />\r\n        {resetbtn}\r\n        <div className={classes.container}>{job}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Container;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Container from \"./Container/Container\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}